/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,19],$V2=[1,23],$V3=[1,20],$V4=[1,21],$V5=[1,54],$V6=[1,55],$V7=[1,56],$V8=[1,57],$V9=[1,58],$Va=[1,71],$Vb=[1,53],$Vc=[1,59],$Vd=[1,60],$Ve=[1,61],$Vf=[1,62],$Vg=[1,63],$Vh=[1,45],$Vi=[1,64],$Vj=[1,65],$Vk=[1,66],$Vl=[1,67],$Vm=[1,68],$Vn=[1,22],$Vo=[1,73],$Vp=[10,14,16],$Vq=[1,83],$Vr=[1,75],$Vs=[1,76],$Vt=[1,77],$Vu=[1,78],$Vv=[1,79],$Vw=[1,80],$Vx=[1,81],$Vy=[10,14,16,30,66,72,74,77,83,87,89,95,116,117,118,119,120,121],$Vz=[2,78],$VA=[1,97],$VB=[29,60,61,62,63,64,66,67,68,69,85,95,96,97,103,104,105,106,107],$VC=[10,14,16,30,66,72,74,77,83,87,95,116,117,118,119,120,121],$VD=[1,106],$VE=[10,14,16,30,72,74,77,83,87,89,116,117,118,119,120,121],$VF=[10,14,16,29,30,60,61,62,63,64,66,67,68,69,72,74,77,83,85,87,89,95,96,97,103,104,105,106,107,116,117,118,119,120,121],$VG=[10,14,16,30,72,74,77,83,89],$VH=[14,16],$VI=[2,12],$VJ=[1,151],$VK=[1,153],$VL=[2,81],$VM=[10,14,16,46,47,48];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Skip":3,"COMMENT":4,"NEWLINE":5,"SEMICOLON":6,"INVALID":7,"File":8,"Module":9,"EOF":10,"Body":11,"Block":12,"INDENT":13,"OUTDENT":14,"Line":15,"TERMINATOR":16,"ExprList":17,"Expression":18,"Statement":19,"Import":20,"Def":21,"Sig":22,"Where":23,"Return":24,"Action":25,"IMPORT":26,"Trigger":27,"DEF":28,"(":29,")":30,"SIG":31,"Condition":32,"QClause":33,"QNegClause":34,"QFilter":35,"Clause":36,"NegClause":37,"WHERE":38,"Lhs":39,"Rhs":40,"WhereTrue":41,"WhereFalse":42,"WhereAllTrue":43,"WhereAllFalse":44,"LONGARROW":45,"NOTARROW":46,"LONGFATARROW":47,"NOTFATARROW":48,"ParExpr":49,"PrefixExpr":50,"PostfixExpr":51,"BinaryExpr":52,"Paragraph":53,"Terminal":54,"Literal":55,"Variable":56,"Term":57,"Snippet":58,"Code":59,"STRING":60,"NUMBER":61,"TRUE":62,"FALSE":63,"VARIABLE":64,"Verb":65,"VERB":66,"NOUN":67,"SNIPPET":68,"CODE":69,"Sentence":70,"ClauseExpr":71,"::":72,"SentenceList":73,"&":74,"AmpList":75,"BindExpr":76,"->":77,"NotOp":78,"SimpleClause":79,"Properties":80,"ObjExpr":81,"CommaList":82,",":83,"TypeName":84,"TYPE":85,"PostTypeName":86,"POSTTYPE":87,"PropertyName":88,"PROPERTY":89,"Property":90,"Typed":91,"Not":92,"Slash":93,"Message":94,"!":95,"NOT":96,"/":97,"Propose":98,"Attempt":99,"Assert":100,"Retract":101,"Modify":102,"*":103,"@":104,"+":105,"-":106,"-+":107,"PostTyped":108,"Achieve":109,"ContextExpr":110,"InjectExpr":111,"TypeOfExpr":112,"AssignExpr":113,"EqualExpr":114,"NotEqualExpr":115,"<:":116,"<<:":117,"^":118,"=":119,"==":120,"!=":121,"RETURN":122,"$accept":0,"$end":1},
terminals_: {2:"error",4:"COMMENT",5:"NEWLINE",6:"SEMICOLON",7:"INVALID",10:"EOF",13:"INDENT",14:"OUTDENT",16:"TERMINATOR",26:"IMPORT",28:"DEF",29:"(",30:")",31:"SIG",38:"WHERE",45:"LONGARROW",46:"NOTARROW",47:"LONGFATARROW",48:"NOTFATARROW",60:"STRING",61:"NUMBER",62:"TRUE",63:"FALSE",64:"VARIABLE",66:"VERB",67:"NOUN",68:"SNIPPET",69:"CODE",72:"::",74:"&",77:"->",83:",",85:"TYPE",87:"POSTTYPE",89:"PROPERTY",95:"!",96:"NOT",97:"/",103:"*",104:"@",105:"+",106:"-",107:"-+",116:"<:",117:"<<:",118:"^",119:"=",120:"==",121:"!=",122:"RETURN"},
productions_: [0,[3,1],[3,1],[3,1],[3,1],[8,2],[9,1],[12,2],[12,3],[11,1],[11,3],[11,2],[17,0],[17,1],[17,3],[17,2],[15,1],[15,1],[19,1],[19,1],[19,1],[19,1],[19,1],[25,1],[20,2],[27,1],[21,5],[22,5],[32,1],[32,1],[32,1],[33,1],[34,1],[35,1],[23,5],[39,1],[39,3],[39,2],[40,1],[40,2],[40,2],[40,2],[41,2],[42,2],[43,2],[44,2],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[54,1],[54,1],[54,1],[54,1],[54,1],[55,1],[55,1],[55,1],[55,1],[56,1],[65,1],[57,1],[58,1],[59,1],[53,1],[53,5],[53,5],[73,0],[73,1],[73,3],[73,2],[70,1],[70,3],[75,0],[75,1],[75,3],[71,1],[71,1],[76,3],[37,2],[36,1],[36,2],[79,3],[79,2],[79,2],[79,1],[81,1],[82,0],[82,1],[82,3],[84,1],[86,1],[88,1],[90,1],[90,2],[80,1],[80,2],[49,2],[49,3],[50,1],[50,1],[50,1],[50,1],[91,2],[78,1],[78,1],[92,2],[93,2],[94,1],[94,1],[94,1],[94,1],[94,1],[98,2],[99,2],[100,2],[101,2],[102,2],[51,1],[51,1],[108,2],[109,2],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[110,5],[111,3],[112,3],[113,3],[114,3],[115,3],[24,2],[24,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 5:
 return $$[$0-1]; 
break;
case 6:
 this.$ = new yy.Module($$[$0]); 
break;
case 7:
 this.$ = new yy.Block(); 
break;
case 8: case 100:
 this.$ = $$[$0-1]; 
break;
case 9:
 this.$ = new yy.Block($$[$0]); 
break;
case 10: case 36:
this.$ = $$[$0-2]; $$[$0-2].add($$[$0]);
break;
case 13: case 70: case 76: case 90:
this.$ = [$$[$0]];
break;
case 14: case 71: case 77: case 91:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 23:
 this.$ = new yy.Action($$[$0]); 
break;
case 24:
 this.$ = new yy.ImportStmt($$[$0]); 
break;
case 25:
 this.$ = new yy.Trigger($$[$0]); 
break;
case 26:
 this.$ = new yy.Def($$[$0-2], $$[$0]); 
break;
case 27:
 this.$ = new yy.Sig($$[$0-2], $$[$0]); 
break;
case 31:
this.$ = new yy.QClause($$[$0]);
break;
case 32:
this.$ = new yy.QNegClause($$[$0]);
break;
case 33:
this.$ = new yy.QFilter($$[$0]);
break;
case 34:
this.$ = new yy.Query($$[$0-2], $$[$0]);
break;
case 35:
this.$ = new yy.Lhs($$[$0]);
break;
case 38:
this.$ = new yy.Rhs($$[$0]);
break;
case 39: case 40: case 41: case 98:
this.$ = $$[$0-1]; $$[$0-1].add($$[$0]);
break;
case 42: case 43: case 44: case 45:
 this.$ = new yy.Actions($$[$0], $$[$0-1]); 
break;
case 57: case 58: case 59: case 60:
 this.$ = new yy.Literal($$[$0]); 
break;
case 61:
 this.$ = new yy.Variable($$[$0].slice(1)); 
break;
case 62: case 63:
 this.$ = new yy.term_($$[$0]); 
break;
case 64:
 this.$ = new yy.Snippet($$[$0]); 
break;
case 65:
 this.$ = new yy.Code($$[$0]); 
break;
case 66: case 73: case 78: case 79: case 81: case 82:
this.$ = $$[$0];
break;
case 67: case 68:
this.$ = new yy.Paragraph($$[$0-4], $$[$0-1]);
break;
case 74:
this.$ = new yy.Sentence($$[$0-2], $$[$0]);
break;
case 80:
 this.$ = $$[$0-2]; $$[$0-2].binding = $$[$0]; 
break;
case 83:
this.$ = $$[$0-1]; $$[$0-1].xtra = $$[$0];
break;
case 84:
 this.$ = new yy.Clause($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 85:
 this.$ = new yy.Clause($$[$0-1], $$[$0], yy._null); 
break;
case 86:
 this.$ = new yy.Clause(yy._null, $$[$0-1], $$[$0]); 
break;
case 87:
 this.$ = new yy.Clause(yy._null, $$[$0], yy._null); 
break;
case 88:
this.$ = ($$[$0].length == 1 ? $$[$0][0] : new yy.Array($$[$0]));
break;
case 92: case 94:
 this.$ = $$[$0].slice(0, -1); 
break;
case 93:
 this.$ = $$[$0].slice(1); 
break;
case 95:
 this.$ = new yy.Property($$[$0]); 
break;
case 96:
 this.$ = new yy.Property($$[$0-1], $$[$0]); 
break;
case 97:
this.$ = new yy.Properties($$[$0]);
break;
case 99:
 this.$ = null; 
break;
case 105:
 $$[$0].type = yy.type_($$[$0-1]); this.$ = $$[$0]; 
break;
case 108:
 this.$ = new yy.PrefixExpr($$[$0], $$[$0-1]); 
break;
case 109:
 $$[$0].slash = true; this.$ = $$[$0]; 
break;
case 115:
 this.$ = new yy.Propose($$[$0]); 
break;
case 116:
 this.$ = new yy.Attempt($$[$0]); 
break;
case 117:
 this.$ = new yy.Assert($$[$0]); 
break;
case 118:
 this.$ = new yy.Retract($$[$0]); 
break;
case 119:
 this.$ = new yy.Modify($$[$0]); 
break;
case 122:
 $$[$0-1].type = yy.type_($$[$0]); this.$ = $$[$0-1]; 
break;
case 123:
 this.$ = new yy.PostfixExpr($$[$0], $$[$0-1]); 
break;
case 130:
 this.$ = new yy.BinaryExpr($$[$0-4], $$[$0-1], $$[$0-3]); 
break;
case 131: case 132: case 133: case 134: case 135:
 this.$ = new yy.BinaryExpr($$[$0-2], $$[$0], $$[$0-1]); 
break;
case 136:
 this.$ = new yy.Return($$[$0]); 
break;
case 137:
 this.$ = new yy.Return(null); 
break;
}
},
table: [{8:1,9:2,11:3,15:4,18:6,19:5,20:7,21:8,22:9,23:10,24:11,26:$V0,28:$V1,29:$V2,31:$V3,36:51,38:$V4,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35,122:$Vn},{1:[3]},{10:[1,72]},{10:[2,6],16:$Vo},o($Vp,[2,9]),o($Vp,[2,16]),o($Vp,[2,17],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),o($Vp,[2,18]),o($Vp,[2,19]),o($Vp,[2,20]),o($Vp,[2,21]),o($Vp,[2,22]),o($Vy,[2,46]),o($Vy,[2,47]),o($Vy,[2,48]),o($Vy,[2,49]),o($Vy,[2,50]),o($Vy,[2,51]),{18:84,29:$V2,36:51,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35},{29:[1,85]},{29:[1,86]},{13:[1,87]},o($Vp,[2,137],{49:12,50:13,51:14,52:15,53:16,54:17,91:24,92:25,93:26,94:27,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35,70:36,71:37,57:38,55:39,56:40,58:41,59:42,84:43,78:44,98:46,99:47,100:48,101:49,102:50,36:51,76:52,79:69,65:70,18:88,29:$V2,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,66:$Va,67:$Vb,68:$Vc,69:$Vd,85:$Ve,95:$Vf,96:$Vg,97:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm}),{18:90,29:$V2,30:[1,89],36:51,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35},o($Vy,[2,101]),o($Vy,[2,102]),o($Vy,[2,103]),o($Vy,[2,104]),o($Vy,[2,120]),o($Vy,[2,121]),o($Vy,[2,124]),o($Vy,[2,125]),o($Vy,[2,126]),o($Vy,[2,127]),o($Vy,[2,128]),o($Vy,[2,129]),o($Vy,[2,66]),o([10,14,16,30,66,77,83,87,89,95,116,117,118,119,120,121],[2,73],{72:[1,91],74:[1,92]}),o([10,14,16,30,66,74,77,83,87,89,95,116,117,118,119,120,121],[2,54],{72:[1,93]}),o($Vy,[2,52]),o($Vy,[2,53]),o($Vy,[2,55]),o($Vy,[2,56]),{18:94,29:$V2,36:51,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35},{18:95,29:$V2,36:51,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35},{18:96,29:$V2,36:51,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35},o($Vy,[2,110]),o($Vy,[2,111]),o($Vy,[2,112]),o($Vy,[2,113]),o($Vy,[2,114]),o([10,14,16,30,66,72,74,83,87,89,95,116,117,118,119,120,121],$Vz,{77:$VA}),o($Vy,[2,79]),o($Vy,[2,63]),o($Vy,[2,57]),o($Vy,[2,58]),o($Vy,[2,59]),o($Vy,[2,60]),o($Vy,[2,61]),o($Vy,[2,64]),o($Vy,[2,65]),o($VB,[2,92]),o($VB,[2,106]),o($VB,[2,107]),{18:98,29:$V2,36:51,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35},{18:99,29:$V2,36:51,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35},{18:100,29:$V2,36:51,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35},{18:101,29:$V2,36:51,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35},{18:102,29:$V2,36:51,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35},o($VC,[2,82],{80:103,90:104,88:105,89:$VD}),o($VE,[2,87],{49:12,50:13,51:14,52:15,53:16,54:17,91:24,92:25,93:26,94:27,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35,70:36,71:37,57:38,55:39,56:40,58:41,59:42,84:43,78:44,98:46,99:47,100:48,101:49,102:50,36:51,76:52,79:69,65:70,81:107,82:108,18:109,29:$V2,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,66:$Va,67:$Vb,68:$Vc,69:$Vd,85:$Ve,95:$Vf,96:$Vg,97:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm}),o($VF,[2,62]),{1:[2,5]},o($Vp,[2,11],{19:5,18:6,20:7,21:8,22:9,23:10,24:11,49:12,50:13,51:14,52:15,53:16,54:17,91:24,92:25,93:26,94:27,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35,70:36,71:37,57:38,55:39,56:40,58:41,59:42,84:43,78:44,98:46,99:47,100:48,101:49,102:50,36:51,76:52,79:69,65:70,15:110,26:$V0,28:$V1,29:$V2,31:$V3,38:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,66:$Va,67:$Vb,68:$Vc,69:$Vd,85:$Ve,95:$Vf,96:$Vg,97:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,122:$Vn}),o($Vy,[2,122]),o($Vy,[2,123]),{13:[1,111]},{18:112,29:$V2,36:51,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35},{18:113,29:$V2,36:51,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35},{18:114,29:$V2,36:51,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35},{18:115,29:$V2,36:51,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35},{18:116,29:$V2,36:51,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35},o($VE,[2,85],{49:12,50:13,51:14,52:15,53:16,54:17,91:24,92:25,93:26,94:27,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35,70:36,71:37,57:38,55:39,56:40,58:41,59:42,84:43,78:44,98:46,99:47,100:48,101:49,102:50,36:51,76:52,79:69,65:70,82:108,18:109,81:117,29:$V2,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,66:$Va,67:$Vb,68:$Vc,69:$Vd,85:$Ve,95:$Vf,96:$Vg,97:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm}),o($Vy,[2,93]),o($Vp,[2,24],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),{18:119,27:118,29:$V2,36:51,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35},{18:119,27:120,29:$V2,36:51,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35},{18:128,29:$V2,32:122,33:123,34:124,35:125,36:126,37:127,39:121,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:129,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35},o($Vp,[2,136],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),o($Vy,[2,99]),{30:[1,130],65:82,66:$Va,86:74,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx},{13:[1,131]},o($VE,[2,75],{49:12,50:13,51:14,52:15,53:16,54:17,91:24,92:25,93:26,94:27,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35,70:36,71:37,57:38,55:39,56:40,58:41,59:42,84:43,78:44,98:46,99:47,100:48,101:49,102:50,36:51,76:52,79:69,65:70,75:132,18:133,29:$V2,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,66:$Va,67:$Vb,68:$Vc,69:$Vd,85:$Ve,95:$Vf,96:$Vg,97:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm}),{13:[1,134]},o($VG,[2,105],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),o($VG,[2,108],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),o($VG,[2,109],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),{56:135,64:$V9},o($VG,[2,115],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),o($VG,[2,116],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),o($VG,[2,117],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),o($VG,[2,118],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),o($VG,[2,119],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),o($VC,[2,83],{88:105,90:136,89:$VD}),o($Vy,[2,97]),o($VE,[2,95],{49:12,50:13,51:14,52:15,53:16,54:17,91:24,92:25,93:26,94:27,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35,70:36,71:37,57:38,55:39,56:40,58:41,59:42,84:43,78:44,98:46,99:47,100:48,101:49,102:50,36:51,76:52,79:69,65:70,18:137,29:$V2,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,66:$Va,67:$Vb,68:$Vc,69:$Vd,85:$Ve,95:$Vf,96:$Vg,97:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm}),o($VF,[2,94]),o($Vy,[2,86]),o([10,14,16,30,66,72,74,77,87,89,95,116,117,118,119,120,121],[2,88],{83:[1,138]}),o($VG,[2,90],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),o($Vp,[2,10]),o($VH,$VI,{49:12,50:13,51:14,52:15,53:16,54:17,91:24,92:25,93:26,94:27,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35,70:36,71:37,57:38,55:39,56:40,58:41,59:42,84:43,78:44,98:46,99:47,100:48,101:49,102:50,36:51,76:52,79:69,65:70,17:139,18:140,29:$V2,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,66:$Va,67:$Vb,68:$Vc,69:$Vd,85:$Ve,95:$Vf,96:$Vg,97:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm}),o([10,14,16,30,72,74,77,83,89,116,117],[2,131],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),o($VG,[2,132],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),o($VG,[2,133],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),o($VG,[2,134],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),o($VG,[2,135],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),o($Vy,[2,84]),{30:[1,141]},{30:[2,25],65:82,66:$Va,86:74,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx},{30:[1,142]},{14:[1,143],16:[1,144]},o($VH,[2,35]),o($VH,[2,28]),o($VH,[2,29]),o($VH,[2,30]),o([14,16,66,72,74,87,95,116,117,118,119,120,121],[2,31],{77:$VA}),o($VH,[2,32]),o($VH,[2,33],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),{18:95,29:$V2,36:145,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35},o($Vy,[2,100]),o($VH,$VI,{49:12,50:13,51:14,52:15,53:16,54:17,91:24,92:25,93:26,94:27,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35,70:36,71:37,57:38,55:39,56:40,58:41,59:42,84:43,78:44,98:46,99:47,100:48,101:49,102:50,36:51,76:52,79:69,65:70,18:140,17:146,29:$V2,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,66:$Va,67:$Vb,68:$Vc,69:$Vd,85:$Ve,95:$Vf,96:$Vg,97:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm}),o([10,14,16,30,66,72,77,83,87,89,95,116,117,118,119,120,121],[2,74],{74:[1,147]}),o($VG,[2,76],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),o($VH,$VI,{49:12,50:13,51:14,52:15,53:16,54:17,91:24,92:25,93:26,94:27,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35,70:36,71:37,57:38,55:39,56:40,58:41,59:42,84:43,78:44,98:46,99:47,100:48,101:49,102:50,36:51,76:52,79:69,65:70,18:140,17:148,29:$V2,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,66:$Va,67:$Vb,68:$Vc,69:$Vd,85:$Ve,95:$Vf,96:$Vg,97:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm}),o($Vy,[2,80]),o($Vy,[2,98]),o($VG,[2,96],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),{18:149,29:$V2,36:51,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35},{14:[1,150],16:$VJ},o($VH,[2,13],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),{12:152,13:$VK},{12:154,13:$VK},{40:155,41:156,45:[1,157]},o($VH,[2,37],{49:12,50:13,51:14,52:15,53:16,54:17,91:24,92:25,93:26,94:27,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35,70:36,71:37,57:38,55:39,56:40,58:41,59:42,84:43,98:46,99:47,100:48,101:49,102:50,76:52,79:69,65:70,33:123,34:124,35:125,36:126,37:127,18:128,78:129,32:158,29:$V2,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,66:$Va,67:$Vb,68:$Vc,69:$Vd,85:$Ve,95:$Vf,96:$Vg,97:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm}),o([66,72,74,87,95,116,117,118,119,120,121],$Vz,{14:$VL,16:$VL,77:$VA}),{14:[1,159],16:$VJ},{18:160,29:$V2,36:51,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35},{14:[1,161],16:$VJ},o($VG,[2,91],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),o($Vy,[2,130]),o($VH,[2,15],{49:12,50:13,51:14,52:15,53:16,54:17,91:24,92:25,93:26,94:27,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35,70:36,71:37,57:38,55:39,56:40,58:41,59:42,84:43,78:44,98:46,99:47,100:48,101:49,102:50,36:51,76:52,79:69,65:70,18:162,29:$V2,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,66:$Va,67:$Vb,68:$Vc,69:$Vd,85:$Ve,95:$Vf,96:$Vg,97:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm}),o($Vp,[2,26]),{11:164,14:[1,163],15:4,18:6,19:5,20:7,21:8,22:9,23:10,24:11,26:$V0,28:$V1,29:$V2,31:$V3,36:51,38:$V4,49:12,50:13,51:14,52:15,53:16,54:17,55:39,56:40,57:38,58:41,59:42,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9,65:70,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:36,71:37,76:52,78:44,79:69,84:43,85:$Ve,91:24,92:25,93:26,94:27,95:$Vf,96:$Vg,97:$Vh,98:46,99:47,100:48,101:49,102:50,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:28,109:29,110:30,111:31,112:32,113:33,114:34,115:35,122:$Vn},o($Vp,[2,27]),o($Vp,[2,34],{42:165,43:166,44:167,46:[1,168],47:[1,169],48:[1,170]}),o($VM,[2,38]),{12:171,13:$VK},o($VH,[2,36]),o($Vy,[2,67]),o($VG,[2,77],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),o($Vy,[2,68]),o($VH,[2,14],{86:74,65:82,66:$Va,87:$Vq,95:$Vr,116:$Vs,117:$Vt,118:$Vu,119:$Vv,120:$Vw,121:$Vx}),o($VM,[2,7]),{14:[1,172],16:$Vo},o($VM,[2,39]),o($VM,[2,40]),o($VM,[2,41]),{12:173,13:$VK},{12:174,13:$VK},{12:175,13:$VK},o($VM,[2,42]),o($VM,[2,8]),o($VM,[2,43]),o($VM,[2,44]),o($VM,[2,45])],
defaultActions: {72:[2,5]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 61;
break;
case 1:return 62;
break;
case 2:return 63;
break;
case 3:return 26;
break;
case 4:return 28;
break;
case 5:return 31;
break;
case 6:return 96;
break;
case 7:return 122;
break;
case 8:return 38;
break;
case 9:return 45;
break;
case 10:return 46;
break;
case 11:return 47;
break;
case 12:return 48;
break;
case 13:return 77;
break;
case 14:return 105;
break;
case 15:return 106;
break;
case 16:return 107;
break;
case 17:return 103;
break;
case 18:return 104;
break;
case 19:return 97;
break;
case 20:return 120;
break;
case 21:return 121;
break;
case 22:return 119;
break;
case 23:return 95;
break;
case 24:return 64;
break;
case 25:return 85;
break;
case 26:return 87;
break;
case 27:return 89;
break;
case 28:return 66;
break;
case 29:return 67;
break;
case 30:return 29;
break;
case 31:return 30;
break;
case 32:return 83;
break;
case 33:return 74;
break;
case 34:return 72;
break;
case 35:return 118;
break;
case 36:return 116;
break;
case 37:return 117;
break;
case 38://return 4
break;
case 39:return 68;
break;
case 40:return 69;
break;
case 41:return 60;
break;
case 42:return 5;
break;
case 43://skip whitespace
break;
case 44:return 10;
break;
case 45:return 7;
break;
}
},
rules: [/^(?:([0-9])+)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:import\b)/,/^(?:def\b)/,/^(?:sig\b)/,/^(?:not\b)/,/^(?:return\b)/,/^(?:where\b)/,/^(?:-->)/,/^(?:!->)/,/^(?:==>)/,/^(?:!=>)/,/^(?:->)/,/^(?:\+)/,/^(?:-)/,/^(?:-\+)/,/^(?:\*)/,/^(?:@)/,/^(?:\/)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:!)/,/^(?:\$([a-zA-Z_]+[a-zA-Z0-9_]*))/,/^(?:([A-Z_]+[a-zA-Z0-9_]*):)/,/^(?::([A-Z_]+[a-zA-Z0-9_]*))/,/^(?:([a-z_]+[a-zA-Z0-9_]*):)/,/^(?:([a-z_]+[a-zA-Z0-9_]*))/,/^(?:([A-Z_]+[a-zA-Z0-9_]*))/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:&)/,/^(?:::)/,/^(?:\^)/,/^(?:<:)/,/^(?:<<:)/,/^(?:#.*([\r?\n]+))/,/^(?:\|.*)/,/^(?:\{.*\})/,/^(?:L?"(\\.|[^\\"])*")/,/^(?:[\r?\n]+)/,/^(?:[\s\t]+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}