/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,19],$V2=[1,27],$V3=[1,20],$V4=[1,21],$V5=[1,40],$V6=[1,41],$V7=[1,42],$V8=[1,43],$V9=[1,67],$Va=[1,44],$Vb=[1,45],$Vc=[1,55],$Vd=[1,56],$Ve=[1,57],$Vf=[1,48],$Vg=[1,58],$Vh=[1,59],$Vi=[1,60],$Vj=[1,61],$Vk=[1,62],$Vl=[1,22],$Vm=[1,69],$Vn=[10,14,16],$Vo=[1,70],$Vp=[1,79],$Vq=[1,72],$Vr=[1,73],$Vs=[1,74],$Vt=[1,75],$Vu=[1,76],$Vv=[1,77],$Vw=[10,13,14,16,30,64,70,73,79,83,85,91,111,112,113,114,115],$Vx=[10,13,14,16,30,64,73,79,83,85,91,111,112,113,114,115],$Vy=[29,59,60,61,62,64,65,66,81,91,92,93,99,100,101,102,103],$Vz=[2,74],$VA=[1,96],$VB=[10,13,14,16,30,64,70,73,79,83,91,111,112,113,114,115],$VC=[1,100],$VD=[10,13,14,16,30,70,73,79,83,85,111,112,113,114,115],$VE=[10,13,14,16,29,30,59,60,61,62,64,65,66,70,73,79,81,83,85,91,92,93,99,100,101,102,103,111,112,113,114,115],$VF=[14,16],$VG=[2,12],$VH=[10,14,16,30,70,73,79,85],$VI=[1,133],$VJ=[1,145],$VK=[2,77],$VL=[10,14,16,46,47,48];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Skip":3,"COMMENT":4,"NEWLINE":5,"SEMICOLON":6,"INVALID":7,"File":8,"Module":9,"EOF":10,"Body":11,"Block":12,"INDENT":13,"OUTDENT":14,"Line":15,"TERMINATOR":16,"ExprList":17,"Expression":18,"Statement":19,"Import":20,"Def":21,"DefG":22,"Where":23,"Return":24,"Action":25,"IMPORT":26,"Trigger":27,"DEF":28,"(":29,")":30,"DEFG":31,"Condition":32,"QClause":33,"QNegClause":34,"QFilter":35,"Clause":36,"NegClause":37,"WHERE":38,"Lhs":39,"Rhs":40,"WhereTrue":41,"WhereFalse":42,"WhereAllTrue":43,"WhereAllFalse":44,"LONGARROW":45,"NOTARROW":46,"LONGFATARROW":47,"NOTFATARROW":48,"Terminal":49,"ParExpr":50,"PrefixExpr":51,"PostfixExpr":52,"BinaryExpr":53,"Paragraph":54,"Literal":55,"Variable":56,"Term":57,"Snippet":58,"STRING":59,"TRUE":60,"FALSE":61,"VARIABLE":62,"Verb":63,"VERB":64,"NOUN":65,"SNIPPET":66,"Sentence":67,"SentenceList":68,"ClauseExpr":69,"&":70,"AmpList":71,"BindExpr":72,"->":73,"NotOp":74,"SimpleClause":75,"Properties":76,"ObjExpr":77,"CommaList":78,",":79,"TypeName":80,"TYPE":81,"PostTypeName":82,"POSTTYPE":83,"PropertyName":84,"PROPERTY":85,"Property":86,"Typed":87,"Not":88,"Slash":89,"Message":90,"!":91,"NOT":92,"/":93,"Propose":94,"Attempt":95,"Assert":96,"Retract":97,"Modify":98,"*":99,"@":100,"+":101,"-":102,"-+":103,"PostTyped":104,"Achieve":105,"ContextExpr":106,"InjectExpr":107,"TypeOfExpr":108,"AssignExpr":109,"NotEqualExpr":110,"<:":111,"<<:":112,"^":113,"=":114,"!=":115,"RETURN":116,"$accept":0,"$end":1},
terminals_: {2:"error",4:"COMMENT",5:"NEWLINE",6:"SEMICOLON",7:"INVALID",10:"EOF",13:"INDENT",14:"OUTDENT",16:"TERMINATOR",26:"IMPORT",28:"DEF",29:"(",30:")",31:"DEFG",38:"WHERE",45:"LONGARROW",46:"NOTARROW",47:"LONGFATARROW",48:"NOTFATARROW",59:"STRING",60:"TRUE",61:"FALSE",62:"VARIABLE",64:"VERB",65:"NOUN",66:"SNIPPET",70:"&",73:"->",79:",",81:"TYPE",83:"POSTTYPE",85:"PROPERTY",91:"!",92:"NOT",93:"/",99:"*",100:"@",101:"+",102:"-",103:"-+",111:"<:",112:"<<:",113:"^",114:"=",115:"!=",116:"RETURN"},
productions_: [0,[3,1],[3,1],[3,1],[3,1],[8,2],[9,1],[12,2],[12,3],[11,1],[11,3],[11,2],[17,0],[17,1],[17,3],[17,2],[15,1],[15,1],[19,1],[19,1],[19,1],[19,1],[19,1],[25,1],[20,2],[27,1],[21,5],[22,5],[32,1],[32,1],[32,1],[33,1],[34,1],[35,1],[23,5],[39,1],[39,3],[39,2],[40,1],[40,2],[40,2],[40,2],[41,2],[42,2],[43,2],[44,2],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[49,1],[49,1],[49,1],[49,1],[55,1],[55,1],[55,1],[56,1],[63,1],[57,1],[58,1],[54,1],[54,4],[68,0],[68,1],[68,3],[68,2],[67,1],[67,3],[71,0],[71,1],[71,3],[69,1],[69,1],[72,3],[37,2],[36,1],[36,2],[75,3],[75,2],[75,2],[75,1],[77,1],[78,0],[78,1],[78,3],[80,1],[82,1],[84,1],[86,1],[86,2],[76,1],[76,2],[50,2],[50,3],[51,1],[51,1],[51,1],[51,1],[87,2],[74,1],[74,1],[88,2],[89,2],[90,1],[90,1],[90,1],[90,1],[90,1],[94,2],[95,2],[96,2],[97,2],[98,2],[52,1],[52,1],[104,2],[105,2],[53,1],[53,1],[53,1],[53,1],[53,1],[106,5],[107,3],[108,3],[109,3],[110,3],[24,2],[24,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 5:
 return $$[$0-1]; 
break;
case 6:
 this.$ = new yy.Module($$[$0]); 
break;
case 7:
 this.$ = new yy.Block(); 
break;
case 8: case 96:
 this.$ = $$[$0-1]; 
break;
case 9:
 this.$ = new yy.Block($$[$0]); 
break;
case 10: case 36:
this.$ = $$[$0-2]; $$[$0-2].add($$[$0]);
break;
case 13: case 66: case 72: case 86:
this.$ = [$$[$0]];
break;
case 14: case 67: case 73: case 87:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 23:
 this.$ = new yy.Action($$[$0]); 
break;
case 24:
 this.$ = new yy.ImportStmt($$[$0]); 
break;
case 25:
 this.$ = new yy.Trigger($$[$0]); 
break;
case 26:
 this.$ = new yy.Def($$[$0-2], $$[$0]); 
break;
case 27:
 this.$ = new yy.DefG($$[$0-2], $$[$0]); 
break;
case 31:
this.$ = new yy.QClause($$[$0]);
break;
case 32:
this.$ = new yy.QNegClause($$[$0]);
break;
case 33:
this.$ = new yy.QFilter($$[$0]);
break;
case 34:
this.$ = new yy.Query($$[$0-2], $$[$0]);
break;
case 35:
this.$ = new yy.Lhs($$[$0]);
break;
case 38:
this.$ = new yy.Rhs($$[$0]);
break;
case 39: case 40: case 41: case 94:
this.$ = $$[$0-1]; $$[$0-1].add($$[$0]);
break;
case 42: case 43: case 44: case 45:
 this.$ = new yy.Actions($$[$0], $$[$0-1]); 
break;
case 56: case 57: case 58:
 this.$ = new yy.Literal($$[$0]); 
break;
case 59:
 this.$ = new yy.Variable($$[$0].slice(1)); 
break;
case 60: case 61:
 this.$ = new yy.term_($$[$0]); 
break;
case 62:
 this.$ = new yy.Snippet($$[$0]); 
break;
case 63: case 69: case 74: case 75: case 77: case 78:
this.$ = $$[$0];
break;
case 64:
this.$ = new yy.Paragraph($$[$0-3], $$[$0-1]);
break;
case 70:
this.$ = new yy.Sentence($$[$0-2], $$[$0]);
break;
case 76:
 this.$ = $$[$0-2]; $$[$0-2].binding = $$[$0]; 
break;
case 79:
this.$ = $$[$0-1]; $$[$0-1].xtra = $$[$0];
break;
case 80:
 this.$ = new yy.Clause($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 81:
 this.$ = new yy.Clause($$[$0-1], $$[$0], yy._null); 
break;
case 82:
 this.$ = new yy.Clause(yy._null, $$[$0-1], $$[$0]); 
break;
case 83:
 this.$ = new yy.Clause(yy._null, $$[$0], yy._null); 
break;
case 84:
this.$ = ($$[$0].length == 1 ? $$[$0][0] : new yy.Array($$[$0]));
break;
case 88: case 90:
 this.$ = $$[$0].slice(0, -1); 
break;
case 89:
 this.$ = $$[$0].slice(1); 
break;
case 91:
 this.$ = new yy.Property($$[$0]); 
break;
case 92:
 this.$ = new yy.Property($$[$0-1], $$[$0]); 
break;
case 93:
this.$ = new yy.Properties($$[$0]);
break;
case 95:
 this.$ = null; 
break;
case 101:
 $$[$0].type = yy.type_($$[$0-1]); this.$ = $$[$0]; 
break;
case 104:
 this.$ = new yy.PrefixExpr($$[$0], $$[$0-1]); 
break;
case 105:
 $$[$0].slash = true; this.$ = $$[$0]; 
break;
case 111:
 this.$ = new yy.Propose($$[$0]); 
break;
case 112:
 this.$ = new yy.Attempt($$[$0]); 
break;
case 113:
 this.$ = new yy.Assert($$[$0]); 
break;
case 114:
 this.$ = new yy.Retract($$[$0]); 
break;
case 115:
 this.$ = new yy.Modify($$[$0]); 
break;
case 118:
 $$[$0-1].type = yy.type_($$[$0]); this.$ = $$[$0-1]; 
break;
case 119:
 this.$ = new yy.PostfixExpr($$[$0], $$[$0-1]); 
break;
case 125:
 this.$ = new yy.BinaryExpr($$[$0-4], $$[$0-1], $$[$0-3]); 
break;
case 126: case 127: case 128: case 129:
 this.$ = new yy.BinaryExpr($$[$0-2], $$[$0], $$[$0-1]); 
break;
case 130:
 this.$ = new yy.Return($$[$0]); 
break;
case 131:
 this.$ = new yy.Return(null); 
break;
}
},
table: [{8:1,9:2,11:3,15:4,18:6,19:5,20:7,21:8,22:9,23:10,24:11,26:$V0,28:$V1,29:$V2,31:$V3,36:63,38:$V4,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:47,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38,116:$Vl},{1:[3]},{10:[1,68]},{10:[2,6],16:$Vm},o($Vn,[2,9]),o($Vn,[2,16]),o($Vn,[2,17],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),o($Vn,[2,18]),o($Vn,[2,19]),o($Vn,[2,20]),o($Vn,[2,21]),o($Vn,[2,22]),o($Vw,[2,46]),o($Vw,[2,47]),o($Vw,[2,48]),o($Vw,[2,49]),o($Vw,[2,50]),o($Vw,[2,51]),{18:80,29:$V2,36:63,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:47,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38},{29:[1,81]},{29:[1,82]},{13:[1,83]},o($Vn,[2,131],{49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,87:28,88:29,89:30,90:31,104:32,105:33,106:34,107:35,108:36,109:37,110:38,67:39,80:46,74:47,94:49,95:50,96:51,97:52,98:53,69:54,36:63,72:64,75:65,63:66,18:84,29:$V2,59:$V5,60:$V6,61:$V7,62:$V8,64:$V9,65:$Va,66:$Vb,81:$Vc,91:$Vd,92:$Ve,93:$Vf,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk}),o($Vw,[2,52]),o($Vw,[2,53]),o($Vw,[2,54]),o($Vw,[2,55]),{18:86,29:$V2,30:[1,85],36:63,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:47,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38},o($Vw,[2,97]),o($Vw,[2,98]),o($Vw,[2,99]),o($Vw,[2,100]),o($Vw,[2,116]),o($Vw,[2,117]),o($Vw,[2,120]),o($Vw,[2,121]),o($Vw,[2,122]),o($Vw,[2,123]),o($Vw,[2,124]),o($Vw,[2,63]),o($Vw,[2,56]),o($Vw,[2,57]),o($Vw,[2,58]),o($Vw,[2,59]),o($Vw,[2,61]),o($Vw,[2,62]),{18:87,29:$V2,36:63,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:47,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38},{18:88,29:$V2,36:63,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:47,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38},{18:89,29:$V2,36:63,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:47,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38},o($Vw,[2,106]),o($Vw,[2,107]),o($Vw,[2,108]),o($Vw,[2,109]),o($Vw,[2,110]),o($Vx,[2,69],{70:[1,90]}),o($Vy,[2,88]),o($Vy,[2,102]),o($Vy,[2,103]),{18:91,29:$V2,36:63,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:47,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38},{18:92,29:$V2,36:63,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:47,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38},{18:93,29:$V2,36:63,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:47,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38},{18:94,29:$V2,36:63,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:47,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38},{18:95,29:$V2,36:63,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:47,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38},o([10,13,14,16,30,64,70,79,83,85,91,111,112,113,114,115],$Vz,{73:$VA}),o($Vw,[2,75]),o($VB,[2,78],{76:97,86:98,84:99,85:$VC}),o($VD,[2,83],{49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,87:28,88:29,89:30,90:31,104:32,105:33,106:34,107:35,108:36,109:37,110:38,67:39,80:46,74:47,94:49,95:50,96:51,97:52,98:53,69:54,36:63,72:64,75:65,63:66,77:101,78:102,18:103,29:$V2,59:$V5,60:$V6,61:$V7,62:$V8,64:$V9,65:$Va,66:$Vb,81:$Vc,91:$Vd,92:$Ve,93:$Vf,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk}),o($VE,[2,60]),{1:[2,5]},o($Vn,[2,11],{19:5,18:6,20:7,21:8,22:9,23:10,24:11,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,87:28,88:29,89:30,90:31,104:32,105:33,106:34,107:35,108:36,109:37,110:38,67:39,80:46,74:47,94:49,95:50,96:51,97:52,98:53,69:54,36:63,72:64,75:65,63:66,15:104,26:$V0,28:$V1,29:$V2,31:$V3,38:$V4,59:$V5,60:$V6,61:$V7,62:$V8,64:$V9,65:$Va,66:$Vb,81:$Vc,91:$Vd,92:$Ve,93:$Vf,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,116:$Vl}),o($VF,$VG,{49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,87:28,88:29,89:30,90:31,104:32,105:33,106:34,107:35,108:36,109:37,110:38,67:39,80:46,74:47,94:49,95:50,96:51,97:52,98:53,69:54,36:63,72:64,75:65,63:66,17:105,18:106,29:$V2,59:$V5,60:$V6,61:$V7,62:$V8,64:$V9,65:$Va,66:$Vb,81:$Vc,91:$Vd,92:$Ve,93:$Vf,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk}),o($Vw,[2,118]),o($Vw,[2,119]),{13:[1,107]},{18:108,29:$V2,36:63,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:47,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38},{18:109,29:$V2,36:63,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:47,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38},{18:110,29:$V2,36:63,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:47,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38},{18:111,29:$V2,36:63,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:47,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38},o($VD,[2,81],{49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,87:28,88:29,89:30,90:31,104:32,105:33,106:34,107:35,108:36,109:37,110:38,67:39,80:46,74:47,94:49,95:50,96:51,97:52,98:53,69:54,36:63,72:64,75:65,63:66,78:102,18:103,77:112,29:$V2,59:$V5,60:$V6,61:$V7,62:$V8,64:$V9,65:$Va,66:$Vb,81:$Vc,91:$Vd,92:$Ve,93:$Vf,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk}),o($Vw,[2,89]),o($Vn,[2,24],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),{18:114,27:113,29:$V2,36:63,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:47,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38},{18:114,27:115,29:$V2,36:63,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:47,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38},{18:123,29:$V2,32:117,33:118,34:119,35:120,36:121,37:122,39:116,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:124,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38},o($Vn,[2,130],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),o($Vw,[2,95]),{13:$Vo,30:[1,125],63:78,64:$V9,82:71,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv},o($VH,[2,101],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),o($VH,[2,104],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),o($VH,[2,105],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),o($VD,[2,71],{49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,87:28,88:29,89:30,90:31,104:32,105:33,106:34,107:35,108:36,109:37,110:38,67:39,80:46,74:47,94:49,95:50,96:51,97:52,98:53,69:54,36:63,72:64,75:65,63:66,71:126,18:127,29:$V2,59:$V5,60:$V6,61:$V7,62:$V8,64:$V9,65:$Va,66:$Vb,81:$Vc,91:$Vd,92:$Ve,93:$Vf,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk}),o($VH,[2,111],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),o($VH,[2,112],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),o($VH,[2,113],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),o($VH,[2,114],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),o($VH,[2,115],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),{56:128,62:$V8},o($VB,[2,79],{84:99,86:129,85:$VC}),o($Vw,[2,93]),o($VD,[2,91],{49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,87:28,88:29,89:30,90:31,104:32,105:33,106:34,107:35,108:36,109:37,110:38,67:39,80:46,74:47,94:49,95:50,96:51,97:52,98:53,69:54,36:63,72:64,75:65,63:66,18:130,29:$V2,59:$V5,60:$V6,61:$V7,62:$V8,64:$V9,65:$Va,66:$Vb,81:$Vc,91:$Vd,92:$Ve,93:$Vf,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk}),o($VE,[2,90]),o($Vw,[2,82]),o([10,13,14,16,30,64,70,73,83,85,91,111,112,113,114,115],[2,84],{79:[1,131]}),o($VH,[2,86],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),o($Vn,[2,10]),{14:[1,132],16:$VI},o($VF,[2,13],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),o($VF,$VG,{49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,87:28,88:29,89:30,90:31,104:32,105:33,106:34,107:35,108:36,109:37,110:38,67:39,80:46,74:47,94:49,95:50,96:51,97:52,98:53,69:54,36:63,72:64,75:65,63:66,18:106,17:134,29:$V2,59:$V5,60:$V6,61:$V7,62:$V8,64:$V9,65:$Va,66:$Vb,81:$Vc,91:$Vd,92:$Ve,93:$Vf,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk}),o([10,14,16,30,70,73,79,85,111,112],[2,126],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,113:$Vt,114:$Vu,115:$Vv}),o($VH,[2,127],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),o($VH,[2,128],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),o($VH,[2,129],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),o($Vw,[2,80]),{30:[1,135]},{13:$Vo,30:[2,25],63:78,64:$V9,82:71,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv},{30:[1,136]},{14:[1,137],16:[1,138]},o($VF,[2,35]),o($VF,[2,28]),o($VF,[2,29]),o($VF,[2,30]),o([13,14,16,64,70,83,91,111,112,113,114,115],[2,31],{73:$VA}),o($VF,[2,32]),o($VF,[2,33],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),{18:88,29:$V2,36:139,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:47,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38},o($Vw,[2,96]),o($Vx,[2,70],{70:[1,140]}),o($VH,[2,72],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),o($Vw,[2,76]),o($Vw,[2,94]),o($VH,[2,92],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),{18:141,29:$V2,36:63,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:47,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38},o($Vw,[2,64]),o($VF,[2,15],{49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,87:28,88:29,89:30,90:31,104:32,105:33,106:34,107:35,108:36,109:37,110:38,67:39,80:46,74:47,94:49,95:50,96:51,97:52,98:53,69:54,36:63,72:64,75:65,63:66,18:142,29:$V2,59:$V5,60:$V6,61:$V7,62:$V8,64:$V9,65:$Va,66:$Vb,81:$Vc,91:$Vd,92:$Ve,93:$Vf,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk}),{14:[1,143],16:$VI},{12:144,13:$VJ},{12:146,13:$VJ},{40:147,41:148,45:[1,149]},o($VF,[2,37],{49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,87:28,88:29,89:30,90:31,104:32,105:33,106:34,107:35,108:36,109:37,110:38,67:39,80:46,94:49,95:50,96:51,97:52,98:53,69:54,72:64,75:65,63:66,33:118,34:119,35:120,36:121,37:122,18:123,74:124,32:150,29:$V2,59:$V5,60:$V6,61:$V7,62:$V8,64:$V9,65:$Va,66:$Vb,81:$Vc,91:$Vd,92:$Ve,93:$Vf,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk}),o([13,64,70,83,91,111,112,113,114,115],$Vz,{14:$VK,16:$VK,73:$VA}),{18:151,29:$V2,36:63,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:47,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38},o($VH,[2,87],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),o($VF,[2,14],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),o($Vw,[2,125]),o($Vn,[2,26]),{11:153,14:[1,152],15:4,18:6,19:5,20:7,21:8,22:9,23:10,24:11,26:$V0,28:$V1,29:$V2,31:$V3,36:63,38:$V4,49:12,50:13,51:14,52:15,53:16,54:17,55:23,56:24,57:25,58:26,59:$V5,60:$V6,61:$V7,62:$V8,63:66,64:$V9,65:$Va,66:$Vb,67:39,69:54,72:64,74:47,75:65,80:46,81:$Vc,87:28,88:29,89:30,90:31,91:$Vd,92:$Ve,93:$Vf,94:49,95:50,96:51,97:52,98:53,99:$Vg,100:$Vh,101:$Vi,102:$Vj,103:$Vk,104:32,105:33,106:34,107:35,108:36,109:37,110:38,116:$Vl},o($Vn,[2,27]),o($Vn,[2,34],{42:154,43:155,44:156,46:[1,157],47:[1,158],48:[1,159]}),o($VL,[2,38]),{12:160,13:$VJ},o($VF,[2,36]),o($VH,[2,73],{82:71,63:78,13:$Vo,64:$V9,83:$Vp,91:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu,115:$Vv}),o($VL,[2,7]),{14:[1,161],16:$Vm},o($VL,[2,39]),o($VL,[2,40]),o($VL,[2,41]),{12:162,13:$VJ},{12:163,13:$VJ},{12:164,13:$VJ},o($VL,[2,42]),o($VL,[2,8]),o($VL,[2,43]),o($VL,[2,44]),o($VL,[2,45])],
defaultActions: {68:[2,5]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 'NUMBER';
break;
case 1:return 60;
break;
case 2:return 61;
break;
case 3:return 26;
break;
case 4:return 28;
break;
case 5:return 31;
break;
case 6:return 92;
break;
case 7:return 116;
break;
case 8:return 38;
break;
case 9:return 45;
break;
case 10:return 46;
break;
case 11:return 47;
break;
case 12:return 48;
break;
case 13:return 73;
break;
case 14:return 101;
break;
case 15:return 102;
break;
case 16:return 103;
break;
case 17:return 99;
break;
case 18:return 100;
break;
case 19:return 93;
break;
case 20:return 115;
break;
case 21:return 114;
break;
case 22:return 91;
break;
case 23:return 62;
break;
case 24:return 81;
break;
case 25:return 83;
break;
case 26:return 85;
break;
case 27:return 64;
break;
case 28:return 65;
break;
case 29:return 29;
break;
case 30:return 30;
break;
case 31:return 79;
break;
case 32:return 70;
break;
case 33:return '::';
break;
case 34:return 113;
break;
case 35:return 111;
break;
case 36:return 112;
break;
case 37://return 4
break;
case 38:return 66;
break;
case 39:return 59;
break;
case 40:return 5;
break;
case 41://skip whitespace
break;
case 42:return 10;
break;
case 43:return 7;
break;
}
},
rules: [/^(?:digit+)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:import\b)/,/^(?:def\b)/,/^(?:defg\b)/,/^(?:not\b)/,/^(?:return\b)/,/^(?:where\b)/,/^(?:-->)/,/^(?:!->)/,/^(?:==>)/,/^(?:!=>)/,/^(?:->)/,/^(?:\+)/,/^(?:-)/,/^(?:-\+)/,/^(?:\*)/,/^(?:@)/,/^(?:\/)/,/^(?:!=)/,/^(?:=)/,/^(?:!)/,/^(?:\$([a-zA-Z_]+[a-zA-Z0-9_]*))/,/^(?:([A-Z_]+[a-zA-Z0-9_]*):)/,/^(?::([A-Z_]+[a-zA-Z0-9_]*))/,/^(?:([a-z_]+[a-zA-Z0-9_]*):)/,/^(?:([a-z_]+[a-zA-Z0-9_]*))/,/^(?:([A-Z_]+[a-zA-Z0-9_]*))/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:&)/,/^(?:::)/,/^(?:\^)/,/^(?:<:)/,/^(?:<<:)/,/^(?:#.*([\r?\n]+))/,/^(?:\|.*)/,/^(?:L?"(\\.|[^\\"])*")/,/^(?:[\r?\n]+)/,/^(?:[\s\t]+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}